par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],probability=TRUE)
abline(v = mu)
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],probability=TRUE)
abline(v = mu, col="red", lwd=2)
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],probability=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],probability=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
######################
n <- 200
est_200 <- matrix(0, B, 4)
set.seed(123)
for(i in 1:B){
x <- rnorm(n, mu, sigma)
est_200[i,1] <- mean(x)
est_200[i,2] <- median(x)
est_200[i,3] <- (min(x)+max(x))/2
est_200[i,4] <- mean(sort(x)[-c(1,n)])
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],probability=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],probability=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
warnings()
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],prob=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],prob=TRUE, xlab=j)
abline(v = mu, col="red", lwd=2)
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],prob=TRUE, xlab=j, xlim=c(2,8)
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
n <- 1000
est_1000 <- matrix(0, B, 4)
set.seed(123)
for(i in 1:B){
x <- rnorm(n, mu, sigma)
est_1000[i,1] <- mean(x)
est_1000[i,2] <- median(x)
est_1000[i,3] <- (min(x)+max(x))/2
est_1000[i,4] <- mean(sort(x)[-c(1,n)])
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
######################
n <- 1000
est_1000 <- matrix(0, B, 4)
set.seed(123)
for(i in 1:B){
x <- rnorm(n, mu, sigma)
est_1000[i,1] <- mean(x)
est_1000[i,2] <- median(x)
est_1000[i,3] <- (min(x)+max(x))/2
est_1000[i,4] <- mean(sort(x)[-c(1,n)])
}
library(MASS)
par(mfrow = c(2,2))
for(j in 1:4){
hist.scott(est[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_200[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
for(j in 1:4){
hist.scott(est_1000[,j],prob=TRUE, xlab=j, xlim=c(2,8))
abline(v = mu, col="red", lwd=2)
}
mu <- 5
sigma <- 2
B <- 1000
n <- 10
set.seed(123)
alpha <- 0.05
CI <- matrix(0, B, 2)
l <- rep(0, B)
for(i in 1:B){
x <- rnorm(10, mu, sigma)
CI[i,1] <- mean(x) + qnorm(alpha/2)*sigma/sqrt(n)
CI[i,2] <- mean(x) + qnorm(1-alpha/2)*sigma/sqrt(n)Ã¹
l[i] <- (mu > CI[i,1] & mu < CI[i,2])
}
mu <- 5
sigma <- 2
B <- 1000
n <- 10
set.seed(123)
alpha <- 0.05
CI <- matrix(0, B, 2)
l <- rep(0, B)
for(i in 1:B){
x <- rnorm(10, mu, sigma)
CI[i,1] <- mean(x) + qnorm(alpha/2)*sigma/sqrt(n)
CI[i,2] <- mean(x) + qnorm(1-alpha/2)*sigma/sqrt(n)
l[i] <- (mu > CI[i,1] & mu < CI[i,2])
}
head(CI)
l
mean(l)
d <- 0
plot(0,0,, xlim=c(min(CI[1:100,1]),
max(CI[1:100,1])), ylim=c(0,10))
par(mfrow=c(1,1))
plot(0,0,, xlim=c(min(CI[1:100,1]),
max(CI[1:100,1])), ylim=c(0,10))
par(mfrow=c(1,1))
plot(0,0,, xlim=c(min(CI[1:100,1]),
max(CI[1:100,1])),
ylim=c(0,10), xlab=expression(mu), ylab="")
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1],CI[i,2],100),rep(0,d),col=(l[i]+1)
}
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1],CI[i,2],100),rep(0,d),col=(l[i]+1))
}
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1],CI[i,2],length=100),rep(0,d),col=(l[i]+1))
}
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1],CI[i,2],length=100),rep(d,100),col=(l[i]+1))
}
d <- 0
par(mfrow=c(1,1))
plot(0,0,, xlim=c(min(CI[1:100,1]),
max(CI[1:100,2])),
ylim=c(0,10), xlab=expression(mu), ylab="")
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1],CI[i,2],length=100),rep(d,100),col=(l[i]+1))
}
abline(v=mu)
abline(v=mu, col="blue", lwd=2)
set.seed(1)
for(i in 1:B){
x <- rnorm(n,mu, sigma)
CI[i,1] <- mean(x) + qt(alpha/2, df=n-1)*sd(x)/sqrt(n)
CI[i,2] <- mean(x) + qt(1-alpha/2, df=n-1)*sd(x)/sqrt(n)
l[i] <- (mu > CI[i,1] & mu < CI[i,2])
}
mean(l)
d<-0
plot(0,0,xlab="mu", ylab="", xlim=c(min(CI[i,1]),
max(CI[i,2])),
ylim=c(0,10))
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1], CI[i,2], length=100),
rep(d, 100), col=(l[i]+1))
}
d<-0
plot(0,0,xlab="mu", ylab="", xlim=c(min(CI[,1]),
max(CI[,2])),
ylim=c(0,10))
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1], CI[i,2], length=100),
rep(d, 100), col=(l[i]+1))
}
abline(v=mu, col="blue", lwd=2)
set.seed(1234)
for(i in 1:B){
x <- rnorm(n,mu, sigma)
CI[i,1] <- mean(x) + qt(alpha/2, df=n-1)*sd(x)/sqrt(n)
CI[i,2] <- mean(x) + qt(1-alpha/2, df=n-1)*sd(x)/sqrt(n)
l[i] <- (mu > CI[i,1] & mu < CI[i,2])
}
mean(l)
d<-0
plot(0,0,xlab="mu", ylab="", xlim=c(min(CI[,1]),
max(CI[,2])),
ylim=c(0,10))
for(i in 1:100){
d <- d + 0.1
lines(seq(CI[i,1], CI[i,2], length=100),
rep(d, 100), col=(l[i]+1))
}
abline(v=mu, col="blue", lwd=2)
d<-0
plot(0,0,xlab="mu", ylab="", xlim=c(min(CI[,1]),
max(CI[,2])),
ylim=c(0,100))
for(i in 1:1000){
d <- d + 0.1
lines(seq(CI[i,1], CI[i,2], length=100),
rep(d, 100), col=(l[i]+1))
}
abline(v=mu, col="blue", lwd=2)
###########################
# Application pairs 65#
###########################
library(DAAG)
data(pairs65)
data(pair65)
pair65
pair65<- cbind(pair65, pair65$heated - paired65$ambient)
pair65<- cbind(pair65, pair65$heated - pair65$ambient)
pair65
colnames(pair65)[3]<- "diff"
pair65
View(pair65)
n<- nrow(pair65)
CI[1]<- mean(d)+qt(alpha/2)*sd(d)/sqrt(n)
CI[1]<- mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI[2]<- mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI
CI_95
CI_95 <- rep(0,2)
CI_95<- mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_95[2]<- mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_95
n<- nrow(pair65)
d<-pair65[,3]
CI_95 <- rep(0,2)
CI_95<- mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_95[2]<- mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_95
CI_99[2]<-mean(d)+qt(1-alpha/2)*sd(d)/sqrt(n)
CI_99[1]<-mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99[2]<-mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99<-rep(0,2)
CI_99[1]<-mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99[2]<-mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99
alpha <- 0.01
CI_99<-rep(0,2)
CI_99[1]<-mean(d)+qt(alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99[2]<-mean(d)+qt(1-alpha/2,df=n-1)*sd(d)/sqrt(n)
CI_99
curve(dt(x,df=8))
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
par(mfrow=c(1,2))
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
alpha<-0.05
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
alpha<-0.01
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
par(mfrow=c(1,2))
alpha<-0.05
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
alpha<-0.01
curve(dt(x,df=8), from=-5,to=5)
abline(v = qt(alpha/2,df=8))
abline(v = qt(1-alpha/2,df=8))
#Test for the mean difference
Followers_M <- c(135, 118, 113, 107,  98,  86)
Followers_O <- c(123, 110, 106, 103,  91,  89,  89,  62,  58)
v<- (var(Followers_M)*(n1-1)+var(Followers_O)*(n2-1))/(n1+n2-2)
n1<-length(Followers_M)
n2<-length(Followers_O)
mean_M<-mean(Followers_M)
mean_O<-mean(Followers_O)
v<- (var(Followers_M)*(n1-1)+var(Followers_O)*(n2-1))/(n1+n2-2)
v
t<-(mean_M-mean_O)/(sqrt(v*(1/n1+1/n2)))
t
t
pt(t,df=n1+n2-2)
pt(t,df=n1+n2-2, lower.tail=FALSE)
help(t.test)
t.test()
t.test(Followers_M,Followers_O,
alternative="greater",
var.equal = TRUE,
mu=0)
curve(df(x, df=n1+n2-2), from=-5,to=5)
curve(df(x, df=n1+n2-2), from=-5, to=5)
n1+n2-2
curve(dt(x, df=n1+n2-2), from=-5, to=5)
curve(dt(x, df=n1+n2-2), from=-5, to=5)
curve(dt(x, df=n1+n2-2), from=-5, to=5)
par(mfrow=c(1,1))
curve(dt(x, df=n1+n2-2), from=-5, to=5)
abline(v=0.05)
abline(v=qt(1-0.05,df=13))
par(mfrow=c(1,1))
curve(dt(x, df=n1+n2-2), from=-5, to=5)
abline(v=qt(1-0.05,df=13))
abline(v=t, col="red")
text(3,0.20, "Reject")
text(0,0.20, "Acceptt")
x <- sample(1:K, n, replace=TRUE,
prob=p)
######################
#Chi-squared test
######################
p <- c(7/16, 5/16, 3/16, 1/16)
n<- 50
K <- 4
x <- sample(1:K, n, replace=TRUE,
prob=p)
x
table(x)
observed <- table(x)
expected <- n*p
expected
X2 <- sum((observed-expected)^2/expected)
X2
pchisq(X2, df=K-1, lower.tail=FALSE)
p2 <- c(3/16, 5/16, 5/16, 3/16)
x<-sample(1:K, n, replace=TRUE, p2)
table(x)
set.seed(1)
p2 <- c(3/16, 5/16, 6/16, 2/16)
x<-sample(1:K, n, replace=TRUE, p2)
table(x)
expected <- n*p
######################
#Chi-squared test
######################
p <- c(7/16, 5/16, 3/16, 1/16)
n<- 50
K <- 4
x <- sample(1:K, n, replace=TRUE,
prob=p)
observed <- table(x)
expected <- n*p
X2 <- sum((observed-expected)^2/expected)
pchisq(X2, df=K-1, lower.tail=FALSE)
chisq.test(observed,p = p)
set.seed(1)
x <- sample(1:K, n, replace=TRUE,
prob=p)
observed <- table(x)
expected <- n*p
X2 <- sum((observed-expected)^2/expected)
pchisq(X2, df=K-1, lower.tail=FALSE)
chisq.test(observed,p = p)
X2
set.seed(1)
p2 <- c(3/16, 5/16, 6/16, 2/16)
x<-sample(1:K, n, replace=TRUE, p2)
observed <- table(x)
expected <- n*p
chisq.test(observed, p)
expected
p<- c(1/4,1/4,1/4,1/4)
chisq.test(observed,p)
observed
chisq.test(observed,p=p)
x<-matrix(0,M,n)
M<-6
K<-4
n<-50
x<-matrix(0,M,n)
p
p<- c(7/16,5/16,3/16,1/16)
x<-matrix(0,M,n)
for(i in 1:6){
x[i,]<-sample(1:K,n,replace=TRUE,
prob=p)
}
x
observed <- apply(x,1,table)
observed
chisq.test(observed, p=p)
p
chisq.test(observed, p=p)
##################
M<-6
K<-4
n<-50
p<- c(7/16,5/16,3/16,1/16)
x<-matrix(0,M,n)
for(i in 1:6){
x[i,]<-sample(1:K,n,replace=TRUE,
prob=p)
}
observed <- apply(x,1,table)
chisq.test(observed, p=p)
x<-rbind(x, sample(1:K,n,replace,
prob=c(1/16,3/16,5/16,7/16)))
x<-rbind(x, sample(1:K,n,replace = TRUE,
prob=c(1/16,3/16,5/16,7/16)))
x
observed<- apply(x,1,table
)
observed
chisq.test(observed, p=p)
law_large_number<- Vectorize(law_large_number)
law_large_number<- function(n,p){
x<-rbinom(n,1,p)
return(mean(x))
}
law_large_number<- Vectorize(law_large_number)
help(curve)
par(mfrow=c(1,1))
curve(law_large_number(x,p=0.5),
from=1, to=1000)
abline(h=0.5)
abline(h=0.5,col="red")
curve(law_large_number(x,p=0.5),
from=1, to=1000, n=1000)
abline(h=0.5,col="red")
install.packages(c("backports", "blob", "broom", "candisc", "cli", "colorspace", "compositions", "conquer", "cpp11", "crayon", "curl", "data.table", "desc", "diffobj", "digest", "dplyr", "fansi", "gargle", "generics", "googledrive", "googlesheets4", "haven", "heplots", "hms", "htmltools", "isoband", "knitr", "lifecycle", "lubridate", "maptools", "matrixcalc", "matrixStats", "maxLik", "mgcv", "microbenchmark", "mime", "misc3d", "mvtnorm", "openssl", "pillar", "pkgload", "pryr", "R6", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "robustbase", "rvest", "sessioninfo", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "TMB", "usethis", "utf8", "uuid", "xfun"))
ibrary(devtools)
library(devtools)
packageVersion("devtools")
create_package("C:/Users/Gioia/Desktop/First_Attempt/regexcite")
strsplit1 <- function(x, split) {
strsplit(x, split = split)[[1]]
}
use_r("strsplit1")
library(devtools)
create_package("C:/Users/Gioia/Desktop/Second_Attempt/regexcite")
use_r("strsplit1")
library(devtools)
create_package("C:/Users/Gioia/Desktop/Second_Attempt/regexcite")
use_r("strsplit1")
library(devtools)
create_package("C:/Users/Gioia/Desktop/Second_Attempt/regexcite")
install.packages("doMC")
library(foreach)
library(doMC)
install.packages("doMC")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("r-lib/devtools")
devtools::install_github("r-lib/usethis")
library(devtools)
library(devtools)
has_devel()
install.packages("devtools")
install.packages("devtools")
library(devtools)
has_devel()
update.packages(ask = FALSE)
library(devtools)
has_devel()
R.home()
.Library()
.Library
.libPaths
.libPaths()
setwd("C:/Users/Gioia/Desktop/Rpackage")
library(devtools)
create("SCM")
load_all()
setwd("C:/Users/Gioia/Desktop/Heatmap/SCM")
setwd("C:/Users/Gioia/Desktop/Rpackage/SCM")
load_all()
document()
install()
help("plotECPD")
load_all()
document()
install()
help("plotECPD")
document()
help("plotECPD")
document()
library(SCM)
